;; Variables
(defpoll clock_time 
         :interval "30s" "date +\%I")
(defpoll clock_minute 
         :interval "1s" "date +\%M")
(defpoll clock_date 
         :interval "10h" "date '+%d/%m'")
(defvar time_rev_clock false)

(defvar preceding_volume_value 0)
(defvar volume_state true) 
(deflisten volume_percent 
           :initial "0"
           'tail -F ./deflisten_condition/volume')

(deflisten brightness_percent 
           :initial "light '%'"
           `tail -F ./deflisten_condition/brightness`)

(defpoll thermal 
         :interval "10s" "scripts/thermal")

(defvar time_rev_wifi false)
(defpoll COL_WLAN 
         :interval "1m" "~/.config/eww/scripts/wifi --COL")
(defpoll ESSID_WLAN 
         :interval "1m" "~/.config/eww/scripts/wifi --ESSID")
(defpoll WLAN_ICON 
         :interval "1m" "~/.config/eww/scripts/wifi --ICON")

(deflisten workspace "scripts/workspace")
 
(defpoll calendar_day 
         :interval "20h" "date '+%d'")
(defpoll calendar_year 
         :interval "20h" "date '+%Y'")

;; widgets

(defwidget wifi [] 
           (eventbox :onhover "${EWW_CMD} update time_rev_wifi=true"
			               :onhoverlost "${EWW_CMD} update time_rev_wifi=false"
           (box :vexpand "false" 
                :hexpand "false" 
                :space-evenly "false"
	         (button :class "module-wifi" 
                   :wrap "false" 
                   :limit-width 12 
                   :style "color: ${COL_WLAN};" WLAN_ICON)
           (revealer :transition "slideleft"
                     :reveal time_rev_wifi
                     :duration "500ms"
           (label :class "module_essid"
                  :text ESSID_WLAN
                  :orientation "h"
)))))


(defwidget workspaces []
           (literal :content workspace))

(defwidget icon_bat []
           (overlay    
           (box
                :class "icon_bat_fake_background"
                :width 38
           )
           (label :class "icon_bat"
                  :text ""
                  :hexpand false
           )))

(defwidget text_bat []
           (label :class "text_bat"
                  :text "${EWW_BATTERY["BAT1"].capacity}%"
                  :hexpand false
           ))

(defwidget cpu []
           (box :class "cpu_module"
                :vexpand "false"
                :hexpand "false"
           (circular-progress :value {EWW_CPU.avg}
                              :class "cpu_bar"
                              :thickness 5
           (label :class "icon_cpu"
                  :tooltip "${round(EWW_CPU.avg, 1)}%"
                  :text "")))) 

(defwidget mem []
		       (box :class "mem_module" 
                :vexpand "false" 
                :hexpand "false" 
           (circular-progress :value {EWW_RAM.used_mem_perc}
                              :class "mem_bar"
                              :thickness 5
           (button :class "icon_mem"
                   :limit-width 2
                   :tooltip "using ${round(EWW_RAM.used_mem_perc, 1)}% ram"
                   :show_truncated false
                   :wrap false
                   ""))))
(defwidget thermal []
           (box :class "therm_module"
                :vexpand "false"
                :hexpand "false"
           (circular-progress :value thermal
                              :class "therm_bar"
                              :thickness 5
           (label  :class "icon_therm"
                   :tooltip "${thermal}°C"
                   :text ""))))

(defwidget sep []
           (box :class "module-2" 
                :vexpand "false" 
                :hexpand "false"
           (label :class "separ" 
                  :text "|")))

(defwidget clock_icon []
           (overlay
           (box :class "icon_clock_fake_background"
                :width 36
           )
           (label :text ""
                  :class "icon_clock"
                  :hexpand false
     )))

(defwidget clock_module []
           (box :class "clock_module" 
                :space-evenly "false" 
                :orientation "h" 
                :spacing "3" 
           (label :text clock_time 
                  :class "clock_time_class" )
           (label :text ":" 
                  :class "clock_time_sep" )
           (label :text clock_minute 
                  :class "clock_minute_class")
           ))

(defwidget clock_calendar []
           (button :class "clock_calendar"
                   :onclick "$HOME/.config/eww/scripts/pop calendar" clock_date
           ))
  
(defwidget volume []
           (box :class "module-2" 
                :space-evenly "false" 
                :orientation "h" 
                :spacing "3" 
           (label :text "${volume_percent}%" 
                  :class "volume_text")
	         (button :onclick {volume_state ? "./scripts/volume mute" : "./scripts/volume unmute && echo ${preceding_volume_value} >> ./deflisten_condition/volume" }
                   :class "icon_volume" {volume_state ? "" : ""})
	         (scale :class "volbar"
			            :value volume_percent
			            :orientation "h"
			            :tooltip "${volume_percent}%"
			            :max 100
			            :min 0
			            :onchange "amixer -D pulse sset Master {}% && amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ if ($2+0 < 10) {print 0$2} else {print $2}}' | tr -d '%' >> \"\$HOME\"/.config/eww/deflisten_condition/volume" )
           ))

(defwidget bright []
           (box :class "module-2" 
                :space-evenly "false" 
                :orientation "h" 
                :spacing "3" 
           (label :text "${brightness_percent}%" 
                  :class "brightness_text")
           (label :text "" 
                  :class "icon_brightness" 
                  :tooltip "brightness")
	         (scale :class "brightbar"
			            :value brightness_percent
			            :orientation "h"
			            :tooltip "${brightness_percent}%"
			            :max 100
			            :min 0
			            :onchange "light -S {}% && printf \"%.0f\\\n\" \"$(light)\" | awk '{if ($1+0 < 10) {print 0$1} else {print $1}}' >>\"$HOME\"/.config/eww/deflisten_condition/brightness" )
           ))

(defwidget left []
	         (box :orientation "h" 
		            :space-evenly false  
                :halign "end"
		            :class "left_modules"
           (wifi)
           (sep)
           (mem)
           (cpu)
           (thermal)
           (sep)
           (clock_icon)
           (clock_module)
           (clock_calendar)
           ))


(defwidget right []
	         (box :orientation "h" 
		            :space-evenly false  
                :halign "start"
		            :class "right_modules"
           (bright)
           (sep)
           (volume)
           (sep)
           (icon_bat)
           (text_bat)
           ))


(defwidget center []
	         (box :orientation "h" 
		            :space-evenly false  
                :halign "center"
		            :class "center_modules"
           (workspaces)))

(defwidget bar_1 []
           (box :class "bar_class"
                :orientation "h"
           (right)
           (center)
           (left)
           ))

(defwindow bar :monitor 0
               :geometry (geometry :x "0%"
                                   :y "0"
                                   :width "100%"
                                   :height "30px"
                                   :anchor "top center")
               :stacking "fg"
               :windowtype "dock"
               :exclusive "true"
           (bar_1))

(defwidget cal []
	         (box :class "cal" :orientation "v"
	         (box :class "cal-in"
	         (calendar :class "cal" 
			               :day calendar_day 
			               :year calendar_year))))

(defwindow calendar :monitor 0
	                  :geometry (geometry :x "11px" 
						                            :y "11px" 
                                        :anchor "top right"
						                            :width "270px" 
						                            :height "60px")
                    (cal))

