;; Variables
(defpoll clock_time 
         :interval "5m" "date +\%I")
(defpoll clock_minute 
         :interval "5s" "date +\%M")
(defpoll clock_date 
         :interval "10h" "date '+%d/%m'")
(defpoll volume_percent 
         :interval "3s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll mic_percent 
         :interval "3s" "amixer -D pulse sget Capture | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defpoll brightness_percent 
         :interval "3s" "light '%'")
(defpoll battery 
         :interval "15s" "./scripts/battery --bat")
(defpoll battery_status 
         :interval "1m" "./scripts/battery --bat-st")
(defpoll memory 
         :interval "15s" "scripts/memory")
(defpoll memory_used_mb 
         :interval "2m" "scripts/mem-ad used")
(defpoll memory_total_mb 
         :interval "2m" "scripts/mem-ad total")
(defpoll memory_free_mb 
         :interval "2m" "scripts/mem-ad free")
(defpoll thermal 
         :interval "10s" "scripts/thermal")
(defpoll cpu
         :interval "10s" "scripts/cpu")
(defvar time_rev false)
(deflisten workspace "scripts/workspace")

(defvar eww "eww -c $HOME/.config/eww")


(defpoll COL_WLAN 
         :interval "1m" "~/.config/eww/scripts/wifi --COL")
(defpoll ESSID_WLAN 
         :interval "1m" "~/.config/eww/scripts/wifi --ESSID")
(defpoll WLAN_ICON 
         :interval "1m" "~/.config/eww/scripts/wifi --ICON")

(defpoll calendar_day 
         :interval "20h" "date '+%d'")
(defpoll calendar_year 
         :interval "20h" "date '+%Y'")

;; widgets

(defwidget wifi [] 
           (box :vexpand "false" 
                :hexpand "false" 
                :space-evenly "false"
	         (button :class "module-wif" 
                   :wrap "false" 
                   :limit-width 12 
                   :style "color: ${COL_WLAN};" WLAN_ICON)
           (label    :class "module_essid"
			               :text ESSID_WLAN
			               :orientation "h"
)))


(defwidget workspaces []
           (literal :content workspace))

(defwidget bat []
		       (box :class "bat_module" 
                :vexpand "false" 
                :hexpand "false" 
           (label :class "icon_bat"
                  :text "")
           (label :class "text_bat"
                  :text "${battery}%")
           ))

(defwidget cpu []
           (box :class "cpu_module"
                :vexpand "false"
                :hexpand "false"
           (circular-progress :value cpu
                              :class "cpubar"
                              :thickness 4
           (label :class "iconcpu"
                  :tooltip "${cpu}%"
                  :text ""))))

(defwidget mem []
		       (box :class "mem_module" 
                :vexpand "false" 
                :hexpand "false" 
           (circular-progress :value memory
                              :class "membar"
                              :thickness 4
           (button :class "iconmem"
                   :limit-width 2
                   :tooltip "using ${memory}% ram"
                   :onclick "$HOME/.config/eww/scripts/pop system"
                   :show_truncated false
                   :wrap false
                   ""))))
(defwidget thermal []
           (box :class "therm_module"
                :vexpand "false"
                :hexpand "false"
           (circular-progress :value thermal
                              :class "thermbar"
                              :thickness 4
           (label  :class "icontherm"
                   :tooltip "${thermal}°C"
                   :text ""))))

(defwidget sep []
           (box :class "module-2" 
                :vexpand "false" 
                :hexpand "false"
           (label :class "separ" 
                  :text "|")))

(defwidget clock_module []
           (eventbox :onhover "${eww} update time_rev=true"
			               :onhoverlost "${eww} update time_rev=false"
           (box :class "module" 
                :space-evenly "false" 
                :orientation "h" 
                :spacing "3" 
           (label :text clock_time 
                  :class "clock_time_class" )
           (label :text "" 
                  :class "clock_time_sep" )
           (label :text clock_minute 
                  :class "clock_minute_class")
	         (revealer :transition "slideleft"
			               :reveal time_rev
			               :duration "350ms"
           (button :class "clock_date_class"
                   :onclick "$HOME/.config/eww/scripts/pop calendar" clock_date
           )))))
  
(defwidget volume []
           (box :class "module-2" 
                :space-evenly "false" 
                :orientation "h" 
                :spacing "3" 
           (label :text "${volume_percent}%" 
                  :class "volume_text")
	         (button :onclick "scripts/pop audio"   
                   :class "volume_icon" "")
	         (scale :class "volbar"
			            :value volume_percent
			            :orientation "h"
			            :tooltip "${volume_percent}%"
			            :max 100
			            :min 0
			            :onchange "amixer -D pulse sset Master {}%" )
           ))

(defwidget bright []
           (box :class "module-2" 
                :space-evenly "false" 
                :orientation "h" 
                :spacing "3" 
           (label :text "${brightness_percent}%" 
                  :class "brightness_text")
           (label :text "" 
                  :class "brightness_icon" 
                  :tooltip "brightness")
	         (scale :class "brightbar"
			            :value brightness_percent
			            :orientation "h"
			            :tooltip "${brightness_percent}%"
			            :max 100
			            :min 0
			            :onchange "light -S {}%" )
           ))

(defwidget left []
	         (box :orientation "h" 
		            :space-evenly false  
                :halign "end"
		            :class "left_modules"
           (wifi)
           (sep)
           (mem)
           (cpu)
           (thermal)
           (sep)
           (clock_module)))


(defwidget right []
	         (box :orientation "h" 
		            :space-evenly false  
                :halign "start"
		            :class "right_modules"
           (bright)
           (sep)
           (volume)
           (sep)
           (bat)
           ))


(defwidget center []
	         (box :orientation "h" 
		            :space-evenly false  
                :halign "center"
		            :class "center_modules"
           (workspaces)))

(defwidget bar_1 []
           (box :class "bar_class"
                :orientation "h"
           (right)
           (center)
           (left)
           ))

(defwindow bar :monitor 0
               :geometry (geometry :x "0%"
                                   :y "10px"
                                   :width "99%"
                                   :height "30px"
                                   :anchor "top center")
               :stacking "fg"
               :windowtype "dock"
               :exclusive "true"
           (bar_1))

(defwidget cal []
	         (box :class "cal" :orientation "v"
	         (box :class "cal-in"
	         (calendar :class "cal" 
			               :day calendar_day 
			               :year calendar_year))))

(defwindow calendar :monitor 0
	                  :geometry (geometry :x "11px" 
						                            :y "11px" 
                                        :anchor "top right"
						                            :width "270px" 
						                            :height "60px")
                    (cal))

(defwidget audio []
	         (box :class "audio-box" 
                :orientation "v" 
                :space-evenly "false" 
                :vexpand "false" 
                :hexpand "false"
	         (box :halign "v" 
                :space-evenly "false" 
                :hexpand "false" 
                :vexpand "false"
	         (box :class "speaker_icon" 
                :orientation "v")
	         (box :orientation "v" 
                :halign "center" 
                :vexpand "false" 
                :hexpand "false"
           (label :class "speaker_text" 
                  :text "speaker" 
                  :valign "center" 
                  :halign "left" )
	         (box :class "speaker_bar" 
                :halign "center" 
                :vexpand "false" 
                :hexpand "false"
	         (scale :value volume_percent
                  :space-evenly "false"
			            :orientation "h"
			            :onchange "amixer -D pulse sset Master {}%" 
                  :tooltip "volume on ${volume_percent}%"
			            :max 100
			            :min 0))))
           (label :text "" 
                  :class "audio_sep" 
                  :halign "center")
	         (box :halign "v" 
                :space-evenly "false" 
                :hexpand "false" 
                :vexpand "false"
	         (box :class "mic_icon" 
                :orientation "v")
	         (box :orientation "v" 
                :halign "center" 
                :vexpand "false" 
                :hexpand "false"
           (label :class "mic_text" 
                  :text "mic" 
                  :valign "center" 
                  :halign "left" )
	         (box :class "mic_bar" 
                :halign "center" 
                :vexpand "false" 
                :hexpand "false"
	         (scale :value mic_percent
                  :space-evenly "false"
			            :orientation "h"
                  :tooltip "mic on ${mic_percent}%"
			            :onchange "amixer -D pulse sset Capture {}%" 
			            :max 100
			            :min 0))))))

(defwindow audio_ctl :monitor 0
	                   :geometry (geometry :x "11px" 
						                             :y "1%" 
                                         :anchor "top right"
						                             :width "280px" 
						                             :height "60px")
           (audio))


(defwindow system :monitor 0
	                :geometry (geometry :x "11px" 
						                          :y "1%" 
                                      :anchor "top right"
						                          :width "290px" 
						                          :height "120px")
           (system))

